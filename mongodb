npm init -y
npm install express
npm install mongoose
node server.js

const express = require('express');
const mongoose = require('mongoose');
const app = express();

app.use(express.json());

// ===== MongoDB Atlas Connection =====
mongoose.connect(
    'mongodb+srv://anuk:karishma@karismall.w0avnjo.mongodb.net/bookdb?retryWrites=true&w=majority',
    {
        useNewUrlParser: true,
        useUnifiedTopology: true
    }
)
.then(() => console.log("✅ Connected to MongoDB Atlas"))
.catch(err => console.error("❌ MongoDB connection error:", err));

// ===== Book Schema and Model =====
const bookSchema = new mongoose.Schema({
    title: { type: String, required: true }
});
const Book = mongoose.model('Book', bookSchema);

// ===== Initial Sample Data =====
const initialBooks = [
    { title: "Harry Potter" },
    { title: "The Hobbit" },
    { title: "Ponniyin Selvan" }
];

// Insert sample data if DB is empty
async function initializeData() {
    const count = await Book.countDocuments();
    if (count === 0) {
        await Book.insertMany(initialBooks);
        console.log("📚 Initial books added to MongoDB Atlas");
    } else {
        console.log("📚 Data already exists in MongoDB Atlas");
    }
}

mongoose.connection.once('open', initializeData);

// ===== CRUD Endpoints =====

// GET all books
app.get('/books', async (req, res) => {
    try {
        const books = await Book.find();
        res.json(books);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// ADD a book
app.post('/books', async (req, res) => {
    try {
        if (!req.body.title) return res.status(400).send("Title is required");
        const book = await Book.create({ title: req.body.title });
        res.status(201).json(book);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// UPDATE a book
app.put('/books/:id', async (req, res) => {
    try {
        const book = await Book.findByIdAndUpdate(
            req.params.id,
            { title: req.body.title },
            { new: true, runValidators: true }
        );
        if (!book) return res.status(404).send("Book not found");
        res.json(book);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// DELETE a book
app.delete('/books/:id', async (req, res) => {
    try {
        const book = await Book.findByIdAndDelete(req.params.id);
        if (!book) return res.status(404).send("Book not found");
        res.send("Book deleted successfully");
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// ===== Start Server =====
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`🚀 Server running at http://localhost:${PORT}/books`);
});
